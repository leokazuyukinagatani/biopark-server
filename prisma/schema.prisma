generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  imageId     String?       @unique
  role        Role          @default(USER)
  owners      Owner[]
  locations   Location[]
  Proposition Proposition[]

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  zip        String
  buildingId String   @unique
  building   Building @relation(fields: [buildingId], references: [id])

  @@map("address")
}

model Building {
  id          String      @id @default(uuid())
  name        String
  description String?
  floors      Int
  amenities   String[]
  apartment   Apartment[]
  address     Address?

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique

  @@map("buildings")
}

model Apartment {
  id              String   @id @default(uuid())
  apartmentNumber Int?
  bedrooms        Int?
  bathrooms       Int?
  parkingSpaces   Int?
  furnished       Boolean?
  petsAllowed     Boolean?
  size            Int?
  rentValue       Int?

  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  Owner       Owner?       @relation(fields: [ownerId], references: [id])
  ownerId     String?
  image       Image?       @relation(fields: [imageId], references: [id])
  imageId     String?      @unique
  location    Location?
  Proposition Proposition[]

  @@map("apartments")
}

model Owner {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  apartments Apartment[]

  @@map("owners")
}

model Location {
  id         String   @id @default(uuid())
  startDate  DateTime @default(now())
  endDate    DateTime @default(now())
  totalValue Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String    @unique

  @@map("locations")
}

model Image {
  id        String     @id @default(uuid())
  filename  String     @unique
  url       String
  building  Building?
  apartment Apartment?

  @@map("images")
}

model Proposition {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  apartment   Apartment        @relation(fields: [apartmentId], references: [id])
  apartmentId String           @unique
  rentalValue Int
  status      StatusProposition  @default(PENDING)
}

enum StatusProposition {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  USER
  ADMIN
}
